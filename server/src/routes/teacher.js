const router = require('express').Router();
const moment = require('moment-timezone');
const {
  createSubjects,
  createInsertTimeTablesHistory,
  createInsertItemsHistory,
  createTimetables,
} = require('./helpers.js');
const {
  checkTimetablesHistory,
  getMergeSubjectId,
  getItemNames,
  getMergeTimetables,
  getMergeBelongings,
} = require('./dataAccess.js');
const knex = require('./knex.js');

// üöÄ1.GET:ÊåÅ„Å°Áâ©ÁôªÈå≤ÁîªÈù¢„ÅßÂêÑÊõúÊó•„Å´Ë®≠ÂÆö„Åï„Çå„ÅüÊïôÁßë„ÇíÂëº„Å≥Âá∫„Åó„Å¶Ë°®Á§∫„Åó„Åü„ÅÑ
router.get('/subjects/:date', async (req, res) => {
  let date = req.params.date;
  let tableName = 'timetables_history';
  let dateOrDay = { date: date };
  let itemsTableName = 'items_history';
  let isHistoryData = true;

  const timeTablesHistory = await checkTimetablesHistory(date); // 'timetables_history'„Å´„Éá„Éº„Çø„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ

  // Â±•Ê≠¥„Åå„Å™„ÅÑÊôÇ„ÅÆË®≠ÂÆöÂ§âÊõ¥
  if (!timeTablesHistory.length) {
    tableName = 'timetables';
    dateOrDay = { day: moment(date).locale('ja').format('dd') };
    itemsTableName = 'items';
    isHistoryData = false;
  }

  const subjectList = await getMergeSubjectId(dateOrDay, tableName);
  const subjects = createSubjects(subjectList, 'period');
  const [itemNames, additionalItemNames] = await getItemNames(
    dateOrDay,
    itemsTableName,
    isHistoryData
  );

  // ÊúÄÂæå„Å´Êó•‰ªò„Å®ÊôÇÈñìÂâ≤„ÅÆÊåÅ„Å°Áâ©„Å®Êó•Â∏∏ÂìÅ„Çí„Åæ„Å®„ÇÅ„Åüresult„Çí‰ΩúÊàê
  const result = {
    isHistoryData: isHistoryData,
    selectedDate: date,
    subjects: subjects,
    itemNames: itemNames,
    additionalItemNames: additionalItemNames,
  };

  try {
    res.status(200).send(result);
  } catch (error) {
    console.error(error);
    res.status(500).send('„Çµ„Éº„Éê„Éº„Ç®„É©„Éº„Åß„Åô');
  }
});

// üöÄ2.POST:ÊåÅ„Å°Áâ©ÁôªÈå≤ÁîªÈù¢„Åß„ÄÅ„Åù„ÅÆÊó•„ÅÆÁßëÁõÆ„ÇíÊñ∞Ë¶èÁôªÈå≤„Åó„Åü„ÅÑ„ÄÇ
router.post('/timetables-history/:date', async (req, res) => {
  const date = req.params.date;
  const bodySubjects = req.body.subjects;
  const bodyItems = req.body.itemNames;
  const bodyAdditionalItemNames = req.body.additionalItemNames;

  // „Éá„Éº„Çø„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
  const timeTablesHistory = await checkTimetablesHistory(date);

  // body„ÅÆsubject_name„Çísubject_id„Å´Â§âÊèõ„Åô„Çã„Åü„ÇÅ„Å´„ÄÅsubjects„ÅÆsubject_name„Å†„Åë„ÅÆÈÖçÂàó„ÇíÊ∫ñÂÇô
  const subjectNames = await knex('subjects').pluck('subject_name');

  const insertTimeTablesHistory = await createInsertTimeTablesHistory(
    bodySubjects,
    subjectNames,
    date
  );

  // items_history„ÉÜ„Éº„Éñ„É´„Å´‰øùÂ≠ò„Åô„ÇãÊó•Â∏∏ÂìÅ„ÅÆ„Éá„Éº„Çø
  const insertItems = createInsertItemsHistory(bodyItems, true, date);
  // items_history„ÉÜ„Éº„Éñ„É´„Å´‰øùÂ≠ò„Åô„ÇãËøΩÂä†„ÅÆÊåÅ„Å°Áâ©„Éá„Éº„Çø
  const insertAdditionalItems = createInsertItemsHistory(
    bodyAdditionalItemNames,
    false,
    date
  );

  const insertItemsHistory = [...insertItems, ...insertAdditionalItems];

  // Âêå„ÅòÊó•‰ªò„ÅÆ„Éá„Éº„Çø„Ååtimetable-history„ÉÜ„Éº„Éñ„É´„Å´Â≠òÂú®„Åó„Å™„ÅÑÊôÇ„Å†„ÅëÊñ∞Ë¶èÁôªÈå≤„Åô„Çã
  if (timeTablesHistory.length === 0) {
    await knex('timetables_history').insert(insertTimeTablesHistory);
    await knex('items_history').insert(insertItemsHistory);

    try {
      res.status(200).send('Ê≠£Â∏∏„Å´„Éá„Éº„Çø„ÇíÁôªÈå≤„Åó„Åæ„Åó„Åü');
    } catch (error) {
      console.error(error);
      res.status(500).send('„Çµ„Éº„Éê„Éº„Ç®„É©„Éº„Åß„Åô');
    }
  } else {
    res.status(409).send('„Éá„Éº„Çø„ÅåÊó¢„Å´Â≠òÂú®„Åô„Çã„ÅÆ„Åß‰øùÂ≠ò„Åó„Åæ„Åõ„Çì');
  }
});

// üöÄ3.PATCH:ÊåÅ„Å°Áâ©ÁôªÈå≤ÁîªÈù¢„Åß„ÄÅ„Åù„ÅÆÊó•„ÅÆÁßëÁõÆ„Å®Êó•Â∏∏ÂìÅ„ÇíÂ§âÊõ¥„Åó„Åü„ÅÑ„ÄÇ
router.patch('/timetables-history/:date', async (req, res) => {
  const date = req.params.date;
  const bodySubjects = req.body.subjects;
  const bodyItems = req.body.itemNames;
  const bodyAdditionalItemNames = req.body.additionalItemNames;

  // „Éá„Éº„Çø„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
  const timeTablesHistory = await checkTimetablesHistory(date);

  // Âêå„ÅòÊó•‰ªò„ÅÆ„Éá„Éº„Çø„Ååtimetable-history„ÉÜ„Éº„Éñ„É´„Å´Â≠òÂú®„Åó„Å™„ÅÑÊôÇ„Å†„ÅëÊñ∞Ë¶èÁôªÈå≤„Åô„Çã
  if (timeTablesHistory.length !== 0) {
    // body„ÅÆsubject_name„Çísubject_id„Å´Â§âÊèõ„Åô„Çã„Åü„ÇÅ„Å´„ÄÅsubjects„ÅÆsubject_name„Å†„Åë„ÅÆÈÖçÂàó„ÇíÊ∫ñÂÇô
    const subjectNames = await knex('subjects').pluck('subject_name');

    const insertTimeTablesHistory = await createInsertTimeTablesHistory(
      bodySubjects,
      subjectNames,
      date
    );

    // items_history„ÉÜ„Éº„Éñ„É´„Å´‰øùÂ≠ò„Åô„ÇãÊó•Â∏∏ÂìÅ„ÅÆ„Éá„Éº„Çø
    const insertItems = createInsertItemsHistory(bodyItems, true, date);
    // items_history„ÉÜ„Éº„Éñ„É´„Å´‰øùÂ≠ò„Åô„ÇãËøΩÂä†„ÅÆÊåÅ„Å°Áâ©„Éá„Éº„Çø
    const insertAdditionalItems = createInsertItemsHistory(
      bodyAdditionalItemNames,
      false,
      date
    );

    const insertItemsHistory = [...insertItems, ...insertAdditionalItems];

    // date„Åå‰∏ÄËá¥„Åô„Çã„Éá„Éº„Çø„ÇíÂÖ®„Å¶ÂâäÈô§„Åó„Å¶„Åã„Çâ„ÄÅÊñ∞„Åó„ÅÑ„Éá„Éº„Çø„ÇíÊåøÂÖ•„Åô„Çã
    await knex('timetables_history').where({ date: date }).del();
    await knex('items_history').where({ date: date }).del();

    // „Éá„Éº„ÇøÊåøÂÖ•
    await knex('timetables_history').insert(insertTimeTablesHistory);
    await knex('items_history').insert(insertItemsHistory);

    try {
      res.status(200).send('Ê≠£Â∏∏„Å´„Éá„Éº„Çø„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü');
    } catch (error) {
      console.error(error);
      res.status(500).send('„Çµ„Éº„Éê„Éº„Ç®„É©„Éº„Åß„Åô');
    }
  } else {
    res.status(404).send('ÂØæË±°„ÅÆ„Éá„Éº„Çø„ÅåÂ≠òÂú®„Åó„Å™„ÅÑ„ÅÆ„ÅßÊõ¥Êñ∞„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü');
  }
});

// üöÄ4.GET:Ë®≠ÂÆöÁîªÈù¢„ÅÆÁîüÂæíÁ∑®ÈõÜ„ÅßÁîüÂæí„ÅÆ„Éá„Éº„Çø„ÇíÂèó„ÅëÂèñ„Çä„Åü„ÅÑ
router.get('/settings/students', async (_, res) => {
  const students = await knex('students');

  try {
    res.status(200).send(students);
  } catch (error) {
    console.error(error);
    res.status(500).send('„Çµ„Éº„Éê„Éº„Ç®„É©„Éº„Åß„Åô');
  }
});

// üöÄ5.GET:Ë®≠ÂÆöÁîªÈù¢„ÅÆÊôÇÈñìÂâ≤Á∑®ÈõÜ„ÅßÊôÇÈñìÂâ≤„ÅÆ„Éá„Éº„Çø„ÇíÂèó„ÅëÂèñ„Çä„Åü„ÅÑ
router.get('/settings/timetables', async (_, res) => {
  const timetableList = await getMergeTimetables();
  const subjectNames = await knex('subjects').pluck('subject_name');
  const timetables = createTimetables(timetableList, subjectNames);

  try {
    res.status(200).send(timetables);
  } catch (error) {
    console.error(error);
    res.status(500).send('„Çµ„Éº„Éê„Éº„Ç®„É©„Éº„Åß„Åô');
  }
});

// üöÄ6.GET:Ë®≠ÂÆöÁîªÈù¢„ÅÆÁßëÁõÆÊØé„ÅÆÊåÅ„Å°Áâ©Á∑®ÈõÜ„ÅßÁßëÁõÆÊØé„ÅÆÊåÅ„Å°Áâ©„ÅÆ„Éá„Éº„Çø„ÇíÂèó„ÅëÂèñ„Çä„Åü„ÅÑ
router.get('/settings/belongings', async (_, res) => {
  const belongingList = await getMergeBelongings();
  const subjects = createSubjects(belongingList, 'subject_name');

  try {
    res.status(200).send(subjects);
  } catch (error) {
    console.error(error);
    res.status(500).send('„Çµ„Éº„Éê„Éº„Ç®„É©„Éº„Åß„Åô');
  }
});

// üöÄ7.GET:Ë®≠ÂÆöÁîªÈù¢„ÅÆÊó•Â∏∏ÂìÅÁ∑®ÈõÜ„ÅßÊó•Â∏∏ÂìÅ„ÅÆ„Éá„Éº„Çø„ÇíÂèó„ÅëÂèñ„Çä„Åü„ÅÑ
router.get('/settings/items', async (_, res) => {
  const itemList = await knex('items');

  try {
    res.status(200).send(itemList);
  } catch (error) {
    console.error(error);
    res.status(500).send('„Çµ„Éº„Éê„Éº„Ç®„É©„Éº„Åß„Åô');
  }
});

module.exports = router;
